---
layout: essay
type: essay
title: "My future in software engineering"
# All dates must be YYYY-MM-DD format!
date: 2025-01-22
published: true
labels:
  - software engineering
---

<img width="200px" class="rounded float-start pe-4" src="../img/typescript.webp">

*My Friend or My Enemy: TypeScript*

One week ago, I had never compiled a TypeScript program. Now, after spending several days immersed in learning TypeScript, I can confidently say it has been a challenging but rewarding journey. Coming from a background in Java/JavaScript, C, and C++, I am familiar with the frameworks of both object-oriented and procedural programming. TypeScript having static typing requires more planning and patience on the developers side compared to some object oriented languages. However, the end product is often very clean and readable code. 

## TypeScript Compared to Other Languages

In a way TypeScript is a middle ground between JavaScripts flexibility and the strictness of Java. It requires a higher level of discipline than Javascript while still maintaining its dynamic abilities. Itâ€™s clear as well that it still focuses more on scalability and productivity opposed to performance like C and C++. While TypeScript demands a level of precision similar to C, its basic concepts and syntax should be easy to grasp for anyone with prior experience in an object-oriented language. 

Even though I have not done anything substantial with TypeScript, I am already beginning to admire the readability of the code I have produced.  Another thing I really admire is the seamless integration with JavaScript. The ability to go back and forth feels as if JavaScript and TypeScript are brothers compared to C and C++ being cousins. As each day goes by, I discover new capabilities of TypeScript, and my respect for its structure continues to grow.

## Athletic Software Engineering

One technique that I have started to use to learn TypeScript is athletic software engineering. For those unfamiliar, Athletic Software Engineering emphasizes speed, efficiency, and urgency in software development. Transforming learning into a fast-paced and competitive environment has significantly boosted my motivation and made my learning process more effective. Setting a timer and completing a WOD (Workout of the Day) at home may not perfectly replicate real-world stress, but I quickly noticed improvements in my problem-solving speed and my ability to learn the language. These results were both tangible and rewarding, enhancing the overall efficiency of my learning experience. Athletic Software Engineering and WODs will remain a key part of my growth and progression as a software engineer.

## Concluding Thoughts

TypeScript is a great language with many different applications. Each day that I use it, I grow more fond of the language and its capabilities. One aspect I truly appreciate is the reduction in errors when using TypeScript. While some of this might be attributed to my progression as a programmer, much of it stems from TypeScript's clear syntax. I am looking forward to future projects and opportunities involving TypeScript  and continuing to implement athletic software engineering into my routine 
